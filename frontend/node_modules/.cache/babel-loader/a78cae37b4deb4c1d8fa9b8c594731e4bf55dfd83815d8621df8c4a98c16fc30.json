{"ast":null,"code":"\n\n// import React, { useState } from 'react';\n// import EmotionInput from '../components/EmotionInput';\n// import '../styles/HomePage.css';\n\n// export default function HomePage() {\n//   const [result, setResult] = useState(null);\n\n//   // 🎼 20 nota için rastgele parametreler oluştur\n//   const notes = Array.from({ length: 20 }).map((_, i) => ({\n//     id: i,\n//     left: Math.random() * 100,              // yatay yüzde konum\n//     fallDur: 8 + Math.random() * 6,         // 8–14 saniye arası düşme süresi\n//     swayDur: 3 + Math.random() * 3,         // 3–6 saniye arası yalpalanma süresi\n//     size: 16 + Math.random() * 24,          // 16–40px arası ikon boyutu\n//     color: `hsl(${Math.random() * 360}, 80%, 75%)` // rastgele pastel renk\n//   }));\n\n//   return (\n//     <div className=\"homepage\">\n//       {/* 🎼 Arka planda akan notalar */}\n//       <div className=\"notes-container\">\n//         {notes.map(n => (\n//           <span\n//             key={n.id}\n//             className=\"note\"\n//             style={{\n//               left: `${n.left}%`,           // CSS değişkenlerini inline set ediyoruz\n//               '--fall-dur': `${n.fallDur}s`,\n//               '--sway-dur': `${n.swayDur}s`,\n//               '--note-size': `${n.size}px`,\n//               '--note-color': n.color\n//             }}\n//           >\n//             ♪\n//           </span>\n//         ))}\n//       </div>\n\n//       {/* Başlık */}\n//       <h1>Duygu Analizi + Müzik Öneri</h1>\n\n//       {/* 📝 Duygu Giriş Bölümü */}\n//       <div className=\"emotion-section\">\n//         <EmotionInput onResults={setResult} />\n//       </div>\n\n//       {/* 📊 Analiz Sonuçları ve Müzik Kartları */}\n//       {result && (\n//         <div className=\"results\">\n//           <div className=\"details\">\n//             {result.channels?.text && (\n//               <p>\n//                 📄 Metin: {result.channels.text.label} (\n//                 %{Math.round(result.channels.text.score * 100)})\n//               </p>\n//             )}\n//             {result.channels?.face && (\n//               <p>\n//                 📷 Yüz: {result.channels.face.label} (\n//                 %{Math.round(result.channels.face.score * 100)})\n//               </p>\n//             )}\n//             {result.fused_emotion && (\n//               <p>\n//                 🧠 Füzyon: {result.fused_emotion.label} (\n//                 %{Math.round(result.fused_emotion.score * 100)})\n//               </p>\n//             )}\n//           </div>\n\n//           <div className=\"music-list\">\n//             {result.recommended_music.map((uri) => {\n//               const trackId = uri.split(':').pop();\n//               return (\n//                 <div key={trackId} className=\"music-card\">\n//                   <iframe\n//                     title={trackId}\n//                     src={`https://open.spotify.com/embed/track/${trackId}`}\n//                     allow=\"autoplay; encrypted-media\"\n//                   />\n//                 </div>\n//               );\n//             })}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n// import React, { useState } from 'react';\n// import EmotionInput from '../components/EmotionInput';\n// import '../styles/HomePage.css';\n// import { BACKEND_URL } from '../config';\n\n// export default function HomePage() {\n//   const [result, setResult] = useState(null);\n//   const [feedbackText, setFeedbackText] = useState('');\n//   const [feedbackSent, setFeedbackSent] = useState(false);\n\n//   // 🎼 20 nota için rastgele parametreler oluştur\n//   const notes = Array.from({ length: 20 }).map((_, i) => ({\n//     id: i,\n//     left: Math.random() * 100,\n//     fallDur: 8 + Math.random() * 6,\n//     swayDur: 3 + Math.random() * 3,\n//     size: 16 + Math.random() * 24,\n//     color: `hsl(${Math.random() * 360}, 80%, 75%)`\n//   }));\n\n//   // Genel geri bildirim gönder\n//   const sendGeneralFeedback = async () => {\n//     if (!feedbackText.trim()) return;\n//     try {\n//       await fetch(`${BACKEND_URL}/api/feedback`, {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ feedback: feedbackText })\n//       });\n//       setFeedbackSent(true);\n//     } catch (err) {\n//       console.error('Feedback error', err);\n//     }\n//   };\n\n//   return (\n//     <div className=\"homepage\">\n//       {/* 🎼 Arka planda akan notalar */}\n//       <div className=\"notes-container\">\n//         {notes.map(n => (\n//           <span\n//             key={n.id}\n//             className=\"note\"\n//             style={{\n//               left: `${n.left}%`,           \n//               '--fall-dur': `${n.fallDur}s`,\n//               '--sway-dur': `${n.swayDur}s`,\n//               '--note-size': `${n.size}px`,\n//               '--note-color': n.color\n//             }}\n//           >\n//             ♪\n//           </span>\n//         ))}\n//       </div>\n\n//       {/* Başlık */}\n//       <h1>Duygu Analizi + Müzik Öneri</h1>\n\n//       {/* 📝 Duygu Giriş Bölümü */}\n//       <div className=\"emotion-section\">\n//         <EmotionInput onResults={setResult} />\n//       </div>\n\n//       {/* 📊 Analiz Sonuçları ve Müzik Kartları */}\n//       {result && (\n//         <>\n//           <div className=\"results\">\n//             <div className=\"details\">\n//               {result.channels?.text && (\n//                 <p>📄 Metin: {result.channels.text.label} (%{Math.round(result.channels.text.score * 100)})</p>\n//               )}\n//               {result.channels?.face && (\n//                 <p>📷 Yüz: {result.channels.face.label} (%{Math.round(result.channels.face.score * 100)})</p>\n//               )}\n//               {result.fused_emotion && (\n//                 <p>🧠 Füzyon: {result.fused_emotion.label} (%{Math.round(result.fused_emotion.score * 100)})</p>\n//               )}\n//             </div>\n\n//             <div className=\"music-list\">\n//               {result.recommended_music.map((uri) => {\n//                 const trackId = uri.split(':').pop();\n//                 return (\n//                   <div key={trackId} className=\"music-card\">\n//                     <iframe\n//                       title={trackId}\n//                       src={`https://open.spotify.com/embed/track/${trackId}`}\n//                       allow=\"autoplay; encrypted-media\"\n//                     />\n//                   </div>\n//                 );\n//               })}\n//             </div>\n//           </div>\n\n//           {/* Genel Geri Bildirim Alanı */}\n//           <div className=\"general-feedback\">\n//             <h3>Düşüncelerinizi merak ediyoruz</h3>\n//             <textarea\n//               className=\"feedback-textarea\"\n//               placeholder=\"Düşüncelerinizi bizimle paylaşın...\"\n//               value={feedbackText}\n//               onChange={e => setFeedbackText(e.target.value)}\n//               disabled={feedbackSent}\n//             />\n//             <button\n//               className=\"feedback-button\"\n//               onClick={sendGeneralFeedback}\n//               disabled={feedbackSent}\n//             >\n//               {feedbackSent ? 'Teşekkürler!' : 'Gönder'}\n//             </button>\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/Hasan Memiş/Desktop/DuyguAI_Yeni/frontend/src/pages/HomePage.js"],"sourcesContent":["\r\n\r\n// import React, { useState } from 'react';\r\n// import EmotionInput from '../components/EmotionInput';\r\n// import '../styles/HomePage.css';\r\n\r\n// export default function HomePage() {\r\n//   const [result, setResult] = useState(null);\r\n\r\n//   // 🎼 20 nota için rastgele parametreler oluştur\r\n//   const notes = Array.from({ length: 20 }).map((_, i) => ({\r\n//     id: i,\r\n//     left: Math.random() * 100,              // yatay yüzde konum\r\n//     fallDur: 8 + Math.random() * 6,         // 8–14 saniye arası düşme süresi\r\n//     swayDur: 3 + Math.random() * 3,         // 3–6 saniye arası yalpalanma süresi\r\n//     size: 16 + Math.random() * 24,          // 16–40px arası ikon boyutu\r\n//     color: `hsl(${Math.random() * 360}, 80%, 75%)` // rastgele pastel renk\r\n//   }));\r\n\r\n//   return (\r\n//     <div className=\"homepage\">\r\n//       {/* 🎼 Arka planda akan notalar */}\r\n//       <div className=\"notes-container\">\r\n//         {notes.map(n => (\r\n//           <span\r\n//             key={n.id}\r\n//             className=\"note\"\r\n//             style={{\r\n//               left: `${n.left}%`,           // CSS değişkenlerini inline set ediyoruz\r\n//               '--fall-dur': `${n.fallDur}s`,\r\n//               '--sway-dur': `${n.swayDur}s`,\r\n//               '--note-size': `${n.size}px`,\r\n//               '--note-color': n.color\r\n//             }}\r\n//           >\r\n//             ♪\r\n//           </span>\r\n//         ))}\r\n//       </div>\r\n\r\n//       {/* Başlık */}\r\n//       <h1>Duygu Analizi + Müzik Öneri</h1>\r\n\r\n//       {/* 📝 Duygu Giriş Bölümü */}\r\n//       <div className=\"emotion-section\">\r\n//         <EmotionInput onResults={setResult} />\r\n//       </div>\r\n\r\n//       {/* 📊 Analiz Sonuçları ve Müzik Kartları */}\r\n//       {result && (\r\n//         <div className=\"results\">\r\n//           <div className=\"details\">\r\n//             {result.channels?.text && (\r\n//               <p>\r\n//                 📄 Metin: {result.channels.text.label} (\r\n//                 %{Math.round(result.channels.text.score * 100)})\r\n//               </p>\r\n//             )}\r\n//             {result.channels?.face && (\r\n//               <p>\r\n//                 📷 Yüz: {result.channels.face.label} (\r\n//                 %{Math.round(result.channels.face.score * 100)})\r\n//               </p>\r\n//             )}\r\n//             {result.fused_emotion && (\r\n//               <p>\r\n//                 🧠 Füzyon: {result.fused_emotion.label} (\r\n//                 %{Math.round(result.fused_emotion.score * 100)})\r\n//               </p>\r\n//             )}\r\n//           </div>\r\n\r\n//           <div className=\"music-list\">\r\n//             {result.recommended_music.map((uri) => {\r\n//               const trackId = uri.split(':').pop();\r\n//               return (\r\n//                 <div key={trackId} className=\"music-card\">\r\n//                   <iframe\r\n//                     title={trackId}\r\n//                     src={`https://open.spotify.com/embed/track/${trackId}`}\r\n//                     allow=\"autoplay; encrypted-media\"\r\n//                   />\r\n//                 </div>\r\n//               );\r\n//             })}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n// import React, { useState } from 'react';\r\n// import EmotionInput from '../components/EmotionInput';\r\n// import '../styles/HomePage.css';\r\n// import { BACKEND_URL } from '../config';\r\n\r\n// export default function HomePage() {\r\n//   const [result, setResult] = useState(null);\r\n//   const [feedbackText, setFeedbackText] = useState('');\r\n//   const [feedbackSent, setFeedbackSent] = useState(false);\r\n\r\n//   // 🎼 20 nota için rastgele parametreler oluştur\r\n//   const notes = Array.from({ length: 20 }).map((_, i) => ({\r\n//     id: i,\r\n//     left: Math.random() * 100,\r\n//     fallDur: 8 + Math.random() * 6,\r\n//     swayDur: 3 + Math.random() * 3,\r\n//     size: 16 + Math.random() * 24,\r\n//     color: `hsl(${Math.random() * 360}, 80%, 75%)`\r\n//   }));\r\n\r\n//   // Genel geri bildirim gönder\r\n//   const sendGeneralFeedback = async () => {\r\n//     if (!feedbackText.trim()) return;\r\n//     try {\r\n//       await fetch(`${BACKEND_URL}/api/feedback`, {\r\n//         method: 'POST',\r\n//         headers: { 'Content-Type': 'application/json' },\r\n//         body: JSON.stringify({ feedback: feedbackText })\r\n//       });\r\n//       setFeedbackSent(true);\r\n//     } catch (err) {\r\n//       console.error('Feedback error', err);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"homepage\">\r\n//       {/* 🎼 Arka planda akan notalar */}\r\n//       <div className=\"notes-container\">\r\n//         {notes.map(n => (\r\n//           <span\r\n//             key={n.id}\r\n//             className=\"note\"\r\n//             style={{\r\n//               left: `${n.left}%`,           \r\n//               '--fall-dur': `${n.fallDur}s`,\r\n//               '--sway-dur': `${n.swayDur}s`,\r\n//               '--note-size': `${n.size}px`,\r\n//               '--note-color': n.color\r\n//             }}\r\n//           >\r\n//             ♪\r\n//           </span>\r\n//         ))}\r\n//       </div>\r\n\r\n//       {/* Başlık */}\r\n//       <h1>Duygu Analizi + Müzik Öneri</h1>\r\n\r\n//       {/* 📝 Duygu Giriş Bölümü */}\r\n//       <div className=\"emotion-section\">\r\n//         <EmotionInput onResults={setResult} />\r\n//       </div>\r\n\r\n//       {/* 📊 Analiz Sonuçları ve Müzik Kartları */}\r\n//       {result && (\r\n//         <>\r\n//           <div className=\"results\">\r\n//             <div className=\"details\">\r\n//               {result.channels?.text && (\r\n//                 <p>📄 Metin: {result.channels.text.label} (%{Math.round(result.channels.text.score * 100)})</p>\r\n//               )}\r\n//               {result.channels?.face && (\r\n//                 <p>📷 Yüz: {result.channels.face.label} (%{Math.round(result.channels.face.score * 100)})</p>\r\n//               )}\r\n//               {result.fused_emotion && (\r\n//                 <p>🧠 Füzyon: {result.fused_emotion.label} (%{Math.round(result.fused_emotion.score * 100)})</p>\r\n//               )}\r\n//             </div>\r\n\r\n//             <div className=\"music-list\">\r\n//               {result.recommended_music.map((uri) => {\r\n//                 const trackId = uri.split(':').pop();\r\n//                 return (\r\n//                   <div key={trackId} className=\"music-card\">\r\n//                     <iframe\r\n//                       title={trackId}\r\n//                       src={`https://open.spotify.com/embed/track/${trackId}`}\r\n//                       allow=\"autoplay; encrypted-media\"\r\n//                     />\r\n//                   </div>\r\n//                 );\r\n//               })}\r\n//             </div>\r\n//           </div>\r\n\r\n//           {/* Genel Geri Bildirim Alanı */}\r\n//           <div className=\"general-feedback\">\r\n//             <h3>Düşüncelerinizi merak ediyoruz</h3>\r\n//             <textarea\r\n//               className=\"feedback-textarea\"\r\n//               placeholder=\"Düşüncelerinizi bizimle paylaşın...\"\r\n//               value={feedbackText}\r\n//               onChange={e => setFeedbackText(e.target.value)}\r\n//               disabled={feedbackSent}\r\n//             />\r\n//             <button\r\n//               className=\"feedback-button\"\r\n//               onClick={sendGeneralFeedback}\r\n//               disabled={feedbackSent}\r\n//             >\r\n//               {feedbackSent ? 'Teşekkürler!' : 'Gönder'}\r\n//             </button>\r\n//           </div>\r\n//         </>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}